// community-app/src/components/AIChatBot.jsx
import React, { useState, useRef, useEffect } from 'react';
import { useLazyQuery } from '@apollo/client';
import { gql } from '@apollo/client';
import { 
  Container, 
  Row, 
  Col, 
  Card, 
  Form, 
  Button, 
  Spinner, 
  Badge,
  ListGroup 
} from 'react-bootstrap';
import { 
  BsChatLeftDots, 
  BsLightbulb, 
  BsArrowReturnRight, 
  BsSend 
} from 'react-icons/bs';

// GraphQL query for AI Chatbot
const COMMUNITY_AI_QUERY = gql`
  query CommunityAIQuery($input: String!) {
    communityAIQuery(input: $input) {
      text
      suggestedQuestions
      retrievedPosts {
        id
        title
        content
        category
        createdAt
        author {
          id
          username
        }
      }
    }
  }
`;

// Mock data for when the API is not available
const getMockResponse = (query) => {
  return {
    text: `This is a mock response for your query: "${query}". In a real environment, this would be generated by the AI service.`,
    suggestedQuestions: [
      "What are recent community events?",
      "How can I get involved in the community?",
      "Tell me about safety initiatives"
    ],
    retrievedPosts: [
      {
        id: "mock1",
        title: "Community Event Planning",
        content: "We're organizing a community cleanup next Saturday at 10am. Everyone is welcome to join!",
        category: "news",
        createdAt: new Date().toISOString(),
        author: { id: "user1", username: "community_admin" }
      },
      {
        id: "mock2",
        title: "Safety Tips",
        content: "Remember to lock your doors and windows when leaving home. Report any suspicious activity to local authorities.",
        category: "discussion",
        createdAt: new Date().toISOString(),
        author: { id: "user2", username: "safety_officer" }
      }
    ]
  };
};

const AIChatBot = () => {
  const [messages, setMessages] = useState([]);
  const [inputValue, setInputValue] = useState('');
  const [showChat, setShowChat] = useState(false);
  const [typingAnimation, setTypingAnimation] = useState(false);
  const messagesEndRef = useRef(null);

  // GraphQL query hook
  const [executeQuery, { loading }] = useLazyQuery(COMMUNITY_AI_QUERY, {
    fetchPolicy: 'network-only', // Don't use cache for AI responses
    onError: (error) => {
      console.error('GraphQL Error:', error);
    }
  });

  // Scroll to bottom of messages when new ones are added
  useEffect(() => {
    if (messagesEndRef.current) {
      messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });
    }
  }, [messages]);

  // Handle input submission
  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!inputValue.trim()) return;
    
    // Add user message to chat
    const userMessage = {
      id: Date.now(),
      sender: 'user',
      text: inputValue,
      timestamp: new Date().toISOString()
    };
    
    setMessages(prev => [...prev, userMessage]);
    setInputValue('');
    setTypingAnimation(true);
    
    console.log('Submitting query:', inputValue);
    
    // Simulate typing delay for demo
    setTimeout(async () => {
      try {
        // First try the real GraphQL query
        const { data, error } = await executeQuery({ 
          variables: { input: userMessage.text } 
        });
        
        setTypingAnimation(false);
        
        console.log('AI response data:', data);
        console.log('AI response error:', error);
        
        // Add AI response to messages
        if (data && data.communityAIQuery) {
          const { text, suggestedQuestions, retrievedPosts } = data.communityAIQuery;
          
          const aiMessage = {
            id: Date.now() + 1,
            sender: 'ai',
            text,
            suggestedQuestions,
            retrievedPosts,
            timestamp: new Date().toISOString()
          };
          
          setMessages(prev => [...prev, aiMessage]);
        } else {
          // Fall back to mock data if GraphQL fails
          console.log('Using mock data since GraphQL query failed');
          const mockData = getMockResponse(userMessage.text);
          
          const aiMessage = {
            id: Date.now() + 1,
            sender: 'ai',
            text: mockData.text,
            suggestedQuestions: mockData.suggestedQuestions,
            retrievedPosts: mockData.retrievedPosts,
            timestamp: new Date().toISOString()
          };
          
          setMessages(prev => [...prev, aiMessage]);
        }
      } catch (error) {
        console.error('Error querying AI:', error);
        setTypingAnimation(false);
        
        // Use mock data as fallback
        const mockData = getMockResponse(userMessage.text);
        const aiMessage = {
          id: Date.now() + 1,
          sender: 'ai',
          text: mockData.text,
          suggestedQuestions: mockData.suggestedQuestions,
          retrievedPosts: mockData.retrievedPosts,
          timestamp: new Date().toISOString()
        };
        
        setMessages(prev => [...prev, aiMessage]);
      }
    }, 1500); // 1.5 second delay to simulate thinking
  };

  // Handle suggested question click
  const handleSuggestedQuestion = (question) => {
    setInputValue(question);
    // Auto-submit after a short delay
    setTimeout(() => {
      handleSubmit(new Event('submit', { cancelable: true }));
    }, 500);
  };

  // Format timestamp
  const formatTime = (timestamp) => {
    const date = new Date(timestamp);
    return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
  };

  // Truncate text with ellipsis
  const truncateText = (text, maxLength = 150) => {
    if (text.length <= maxLength) return text;
    return text.substring(0, maxLength) + '...';
  };

  // Toggle chat window
  const toggleChat = () => {
    setShowChat(prev => !prev);
    
    // If opening chat and no messages, add a welcome message
    if (!showChat && messages.length === 0) {
      const welcomeMessage = {
        id: Date.now(),
        sender: 'ai',
        text: 'Hello! I\'m your Community Assistant. I can help you find information about community discussions, events, and more. How can I assist you today?',
        suggestedQuestions: [
          'What are people discussing about safety?',
          'Tell me about recent community events',
          'What topics are popular in discussions?'
        ],
        timestamp: new Date().toISOString()
      };
      
      setMessages([welcomeMessage]);
    }
  };

  return (
    <div className="ai-chatbot-wrapper">
      {/* Chat button */}
      <Button 
        className="chat-toggle-btn" 
        variant="primary" 
        onClick={toggleChat}
        style={{
          position: 'fixed',
          bottom: '20px',
          right: '20px',
          borderRadius: '50%',
          width: '60px',
          height: '60px',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          boxShadow: '0 4px 10px rgba(0, 0, 0, 0.2)',
          zIndex: 1000
        }}
      >
        <BsChatLeftDots size={24} />
      </Button>
      
      {/* Chat Window */}
      {showChat && (
        <div 
          className="chat-window"
          style={{
            position: 'fixed',
            bottom: '90px',
            right: '20px',
            width: '500px',
            height: '700px',
            zIndex: 1000,
            boxShadow: '0 4px 20px rgba(0, 0, 0, 0.15)',
            borderRadius: '10px',
            overflowY: 'auto'
          }}
        >
          <Card className="h-100">
            <Card.Header className="bg-primary text-white d-flex justify-content-between align-items-center">
              <div className="d-flex align-items-center">
                <BsLightbulb className="me-2" />
                <h5 className="mb-0">Community Assistant</h5>
              </div>
              <Button 
                variant="link" 
                className="text-white p-0"
                onClick={toggleChat}
              >
                âœ•
              </Button>
            </Card.Header>
            
            <Card.Body 
              className="messages-container"
              style={{ 
                overflowY: 'auto',
                padding: '1rem',
                display: 'flex',
                flexDirection: 'column',
                background: '#f8f9fa'
              }}
            >
              {messages.map(message => (
                <div 
                  key={message.id}
                  className={`message ${message.sender === 'user' ? 'user-message' : 'ai-message'}`}
                  style={{
                    maxWidth: '80%',
                    marginBottom: '15px',
                    alignSelf: message.sender === 'user' ? 'flex-end' : 'flex-start'
                  }}
                >
                  <div 
                    className={`message-bubble ${message.sender === 'user' ? 'bg-primary text-white' : 'bg-white'}`}
                    style={{
                      padding: '10px 15px',
                      borderRadius: '18px',
                      boxShadow: '0 1px 2px rgba(0, 0, 0, 0.1)',
                      borderBottomLeftRadius: message.sender === 'user' ? '18px' : '5px',
                      borderBottomRightRadius: message.sender === 'user' ? '5px' : '18px'
                    }}
                  >
                    <p className="mb-1">{message.text}</p>
                    <small className="message-time" style={{ opacity: 0.7, fontSize: '0.75rem' }}>
                      {formatTime(message.timestamp)}
                    </small>
                  </div>
                  
                  {/* Suggested Questions */}
                  {message.suggestedQuestions && message.suggestedQuestions.length > 0 && (
                    <div className="suggested-questions mt-2">
                      <small className="text-muted mb-1 d-block">Suggested questions:</small>
                      <div className="d-flex flex-wrap gap-1">
                        {message.suggestedQuestions.map((question, idx) => (
                          <Button 
                            key={idx}
                            variant="outline-primary"
                            size="sm"
                            className="mb-1"
                            onClick={() => handleSuggestedQuestion(question)}
                          >
                            <BsArrowReturnRight className="me-1" />
                            {question}
                          </Button>
                        ))}
                      </div>
                    </div>
                  )}
                  
                  {/* Related Posts */}
                  {message.retrievedPosts && message.retrievedPosts.length > 0 && (
                    <div className="retrieved-posts mt-3">
                      <small className="text-muted d-block mb-2">Related discussions:</small>
                      <ListGroup>
                        {message.retrievedPosts.map((post, idx) => (
                          <ListGroup.Item key={idx} className="mb-2 p-2">
                            <h6 className="mb-1">{post.title}</h6>
                            <div className="d-flex align-items-center mb-1">
                              <Badge bg="secondary" className="me-1">
                                {post.category}
                              </Badge>
                              <small className="text-muted ms-2">
                                by {post.author.username}
                              </small>
                            </div>
                            <p className="mt-1 mb-0 small">
                              {truncateText(post.content, 100)}
                            </p>
                          </ListGroup.Item>
                        ))}
                      </ListGroup>
                    </div>
                  )}
                </div>
              ))}
              
              {/* Loading indicator for when messages are being fetched */}
              {loading && (
                <div className="text-center my-3">
                  <Spinner animation="border" variant="primary" size="sm" />
                  <span className="ms-2">Loading response...</span>
                </div>
              )}
              
              <div ref={messagesEndRef} />
            </Card.Body>
            
            <Card.Footer className="p-2 bg-white">
              <Form onSubmit={handleSubmit}>
                <div className="d-flex">
                  <Form.Control
                    type="text"
                    placeholder="Ask me anything..."
                    value={inputValue}
                    onChange={(e) => setInputValue(e.target.value)}
                    disabled={loading || typingAnimation}
                  />
                  <Button 
                    variant="primary" 
                    type="submit" 
                    className="ms-2"
                    disabled={loading || typingAnimation || !inputValue.trim()}
                  >
                    <BsSend />
                  </Button>
                </div>
              </Form>
            </Card.Footer>
          </Card>
        </div>
      )}
    </div>
  );
};

export default AIChatBot;